



    // /**
    //  * Method fetches all available shifts data
    //  *
    //  * @return \Illuminate\Http\Response
    //  */
    // public function shiftSchedule(Request $request) {
    //     $validator = Validator::make($request->all(), [
    //         "worker_id"    => "required|string",
    //         "shift_id"     => "required|integer|exists:shifts,id",
    //     ]);
        
    //     if ($validator->fails()) return $this->validationErrorResponse($validator->errors()->first());

    //     // $worker->roles()->attach($shiftId);


            // dd($shift);
        // $time = Carbon::now()->toTimeString();
        // if ($shift->time_in > $time && $shift->time_out < $time) {
        //     if ($worker->schedule->shift_day !== $request->shift_day) {
        //         # assign the provided work schedule
        //     }
        // }



    //     if (condition) {
    //         # code...
    //     }
    //     $dateOfSunday = Carbon::now()->subDays(Carbon::now()->dayOfWeek)->hour(0)->minute(0)->seconds(0)->subWeek(1); // 12:00AM on Last Sunday
    //     $dateOfSaturday = Carbon::now()->subDays(Carbon::now()->dayOfWeek)->minute(59)->hour(23)->second(59)->addDays(6)->subWeek(1); // 11:59:59PM on Saturday
    // }






    // $validator = Validator::make($request->all(), [
        //     "worker_id"    => "required|integer",
        //     "shift_id"     => "required|integer|exists:shifts,id",
        //     "shift_day"     => "required|string",
        // ]);

        // if ($validator->fails()) return $this->returnFailed($validator->errors()->first());
